OTA server and client should follow the following sequence:

Here is the picture describes the behavior:

----------------------(1) create socket and wait connect      ----------------------
|                    |--------------------------------------->|                    |
|                    |(2) client connect server               |                    |
|                    |<---------------------------------------|                    |
|                    |(3) server accept client socket         |                    |
|                    |--------------------------------------->|                    |
|                    |(4) send ota update request             |                    |
|                    |<---------------------------------------|                    |
|                    |(5) check request and give response     |                    |
|                    |--------------------------------------->|                    |
|                    |(6) send old image ota version          |                    |
|                    |<---------------------------------------|                    |
|       server       |(7) check version and give reponse      |       client       |
|                    |--------------------------------------->|                    |
|                    |(8) send data header request            |                    |
|                    |<---------------------------------------|                    |
|                    |(9) send data header response           |                    |
|                    |--------------------------------------->|                    |
|                    |(10) send data request                  |                    |
|                    |<---------------------------------------|                    |
|                    |(11) send data.....(multiple times)     |                    |
|                    |--------------------------------------->|                    |
|                    |(12) send data end request              |                    |
|                    |<---------------------------------------|                    |
|                    |(13) give response for send end         |                    |
|                    |--------------------------------------->|                    |
----------------------(14) client close socket.               ----------------------

The common header should be:

--------------------------------------------------------------------------------------------------
|F|I|S|H| IMEI......................... | type 1 byte | palyload len (2 bytes)|  payload ...     |
--------------------------------------------------------------------------------------------------

type:
00-7F for request
80-FF for response

request:
type = 00 for ota update request
type = 01 for ota version request
type = 02 for data header request
type = 03 for data send request
type = 04 for data end send request

response:
type = 80 for ota update response
type = 81 for ota version response
type = 82 for data header response
type = 83 for data send response
type = 84 for data end send response

format desc:
The header Initial 4 bytes : 'F' 'I' 'S' 'H'
IMEI code should be added after (16 bytes)
type occupied one byte
(payload length) occupied two bytes
payload occupied (payload length) bytes

example:

(4) ota update request:
    client send request to server:
    'F' 'I' 'S' 'H' "0123456789abcdef" 00 00 00
    server send response to client:
    'F' 'I' 'S' 'H' "0123456789abcdef" 80 00 00

(6) ota version request:
    client send request to server:
    'F' 'I' 'S' 'H' "0123456789abcdef" 01     09 00   "UBA200410"  (here is the old version)
                                       (type) (len)   (payload)
    server send reponse to client:
    'F' 'I' 'S' 'H' "0123456789abcdef" 81     09 00   "UBA200415"  (here is the new version)
                                       (type) (len)   (payload)

(8) send data header request: (file is 2048 bytes)
    client send request to server:
    'F' 'I' 'S' 'H' "0123456789abcdef" 02 04 00              00 04 00 00 (0x400 has been received)
                                          (length = 4 bytes)
    server send response to client:
    'F' 'I' 'S' 'H' "0123456789abcdef" 82 04 00              00 04 00 00 (0x400 still need to be transfered)  
                                          (length = 4bytes)

(11) send data request:
     client send data request to server:
     'F' 'I' 'S' 'H' "0123456789abcdef" 03 00 00
     server send data to client:
     data byte0 byte1 byte2 byte3 ... byteN

(13) send data end request:
     client send request to server:
     'F' 'I' 'S' 'H' "0123456789abcdef" 04 00 00
     server send response to client:
     'F' 'I' 'S' 'H' "0123456789abcdef" 84 00 00

